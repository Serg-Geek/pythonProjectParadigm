# Контекст
# Предположим, что мы хотим найти элемент в массиве (получить
# его индекс). Мы можем это сделать просто перебрав все элементы.
# Но что, если массив уже отсортирован? В этом случае можно
# использовать бинарный поиск. Принцип прост: сначала берём
# элемент находящийся посередине и сравниваем с тем, который мы
# хотим найти. Если центральный элемент больше нашего,
# рассматриваем массив слева от центрального, а если больше -
# справа и повторяем так до тех пор, пока не найдем наш элемент.
# ● Ваша задача
# Написать программу на любом языке в любой парадигме для
# бинарного поиска. На вход подаётся целочисленный массив и
# число. На выходе - индекс элемента или -1, в случае если искомого
# элемента нет в массиве

def binary_search(array: list[int], num: int):
    if len(array) == 0:
        return -1
    if len(array) == 1:
        if array[0] == num:
            return 0
        else:
            return -1
    middle = len(array) // 2

    if array[middle] == num:
        return middle

    elif array[middle] < num:
        result = binary_search(array[middle + 1:], num)
        if result == -1:
            return -1
        else:
            return middle + 1 + result
    else:
        return binary_search(array[:middle], num)


if __name__ == '__main__':
    my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 99, 134, 645]
    num_to_find = 99
    result = binary_search(my_array, num_to_find)
    print(f"Индекс элемента {num_to_find}: {result}")
